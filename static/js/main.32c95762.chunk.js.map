{"version":3,"sources":["components/EmployeeContext.js","components/Search.js","components/Navbar.js","hooks/API.js","components/Button.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeContext","createContext","Search","useState","search","setSearch","useContext","employees","setDisplayedEmployees","type","onChange","searchTerm","target","value","filterResult","filter","employee","name","first","toLowerCase","indexOf","Navbar","className","useGet","url","setEmployees","displayedEmployees","useEffect","a","axios","get","response","data","results","console","log","getEmployees","sortFunc","sort","b","dob","age","Button","children","Table","onClick","map","key","login","uuid","last","location","street","number","gender","email","App","Provider","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yUAEaA,EAAkBC,wBAAc,MCyB9BC,MAxBf,WAAkB,MAEcC,mBAAS,IAFvB,mBAEPC,EAFO,KAECC,EAFD,OAG+BC,qBAAWN,GAAhDO,EAHM,EAGNA,UAAWC,EAHL,EAGKA,sBAiBnB,OACI,2BAAOC,KAAK,OAAOC,SAhBvB,YAAmC,IAEzBC,EAFwB,EAAVC,OAEMC,MAE1BR,EAAUM,GAEV,IAAMG,EAAeP,EAAUQ,QAAO,SAAUC,GAI5C,OAAgF,IAAzEA,EAASC,KAAKC,MAAMC,cAAcC,QAAQT,EAAWQ,kBAEhEX,EAAsB,YAAIM,KAIiBD,MAAOT,K,MCR3CiB,MAZf,WAEI,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,aAAf,sBACA,yBAAKA,UAAU,cACX,yBAAKA,UAAU,QAAf,qBACA,kBAAC,EAAD,S,yCCPT,SAASC,EAAOC,GAAM,IAAD,EACuDlB,qBAAWN,GAAlFO,EADgB,EAChBA,UAAWkB,EADK,EACLA,aAAcC,EADT,EACSA,mBAAoBlB,EAD7B,EAC6BA,sBAwDrD,OAnDAmB,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,+EAE+BC,IAAMC,IAAIN,GAFzC,OAEcO,EAFd,OAIQN,EAAaM,EAASC,KAAKC,SAE3BzB,EAAsBuB,EAASC,KAAKC,SAN5C,gDASQC,QAAQC,IAAI,4CAAZ,MATR,0DADY,uBAAC,WAAD,wBAaZC,KACD,IAqCI,CAAEV,qBAAoBW,SAlC7B,SAAkBC,GACd,OAAQA,GACJ,IAAK,OAaT/B,EAAU+B,MAAK,SAAUV,EAAGW,GACxB,OAAIX,EAAEX,KAAKC,MAAQqB,EAAEtB,KAAKC,OACd,EAED,KAIfV,EAAsB,YAAID,IAnBlB,MACJ,IAAK,MAuBTA,EAAU+B,MAAK,SAAUV,EAAGW,GACxB,OAAQX,EAAEY,IAAIC,IAAMF,EAAEC,IAAIC,OAE9BjC,EAAsB,YAAID,IAxBlB,MACJ,QACI2B,QAAQC,IAAI,oC,MCzBbO,MARf,YAA+B,IAAbC,EAAY,EAAZA,SAEd,OACI,4BAAQrB,UAAU,UACbqB,ICuCEC,MAxCf,WAAiB,MAGCzC,mBAAS,yCAEfkC,EAAad,EALR,qBAKLc,SAEAX,EAAuBpB,qBAAWN,GAAlC0B,mBAER,OACI,+BACI,+BACI,4BACI,wBAAImB,QAAS,kBAAMR,EAAS,UAAS,kBAAC,EAAD,oBACrC,yCACA,wBAAIQ,QAAS,kBAAMR,EAAS,SAAQ,kBAAC,EAAD,qBACpC,sCACA,sCACA,wBAAIQ,QAAS,kBAAMR,EAAS,SAAQ,kBAAC,EAAD,eAI5C,+BACKX,EAAmBoB,KAAI,SAAA9B,GACpB,OACI,wBAAI+B,IAAK/B,EAASgC,MAAMC,MACpB,4BAAKjC,EAASC,KAAKC,OACnB,4BAAKF,EAASC,KAAKiC,MACnB,4BAAKlC,EAASmC,SAASC,OAAOC,QAC9B,4BAAKrC,EAASsC,QACd,4BAAKtC,EAASuC,OACd,4BAAKvC,EAASwB,IAAIC,YChB/Be,MAdf,WAAgB,IAAD,EACuBrD,mBAAS,IADhC,mBACJI,EADI,KACOkB,EADP,OAEyCtB,mBAAS,IAFlD,mBAEJuB,EAFI,KAEgBlB,EAFhB,KAIX,OACI,yBAAKc,UAAU,OACX,kBAACtB,EAAgByD,SAAjB,CAA0B5C,MAAO,CAAEN,YAAWkB,eAAcC,qBAAoBlB,0BAC5E,kBAAC,EAAD,MACA,kBAAC,EAAD,SCdVkD,EAAcC,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,4DA+BN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAE1B1C,QAAQC,IACN,wBAIE8B,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAIlBpC,QAAQC,IAAI,sCAGR8B,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACL9C,QAAQ8C,MAAM,4CAA6CA,MCnEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDK1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,6BAAwB1B,OAAOT,SAASoC,MACpDC,SAAW5B,OAAOT,SAASqC,OAEvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,6BAAN,sBAEP5B,IAsDV,SAAiCM,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAtC,GAEJ,IAAM6D,EAAc7D,EAAS4D,QAAQ7D,IAAI,gBAEnB,MAApBC,EAAS8D,QACO,MAAfD,IAA8D,IAAvCA,EAAYxE,QAAQ,cAG5C8C,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOT,SAAS6C,eAKpBjC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL7C,QAAQC,IACN,oEA7EA8D,CAAwBjC,EAAOC,GAE/BC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCnC,QAAQC,IAAI,YAId4B,EAAgBC,EAAOC,OCnB/BE,K","file":"static/js/main.32c95762.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\nexport const EmployeeContext = createContext(null);","import React, { useState, useContext } from 'react';\r\nimport { EmployeeContext } from './EmployeeContext.js';\r\n\r\nfunction Search() {\r\n    // stores the characters being entered \r\n    const [search, setSearch] = useState(\"\")\r\n    const { employees, setDisplayedEmployees } = useContext(EmployeeContext)\r\n\r\n    function updateSearch({ target }) {\r\n        // using for readability\r\n        const searchTerm = target.value\r\n        // used for updating the value, so it always equals exactly what is saved in state\r\n        setSearch(searchTerm)\r\n        // filters the employees based on the text that is entered in the search \r\n        const filterResult = employees.filter(function (employee) {\r\n            // makes name lowercase, \r\n            // if first name contains the current search, display \r\n            // if not it is removed from the list.\r\n            return employee.name.first.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1 ? true : false\r\n        })\r\n        setDisplayedEmployees([...filterResult])\r\n    }\r\n    // every letter entered triggers the onChange event.\r\n    return (\r\n        <input type=\"text\" onChange={updateSearch} value={search}></input>\r\n    )\r\n}\r\nexport default Search;\r\n","import React from 'react';\r\nimport Search from \"./Search.js\"\r\nimport \"./Navbar.css\"\r\n\r\nfunction Navbar() {\r\n    // used as the navbar for the site.\r\n    return (\r\n        <div className=\"navbar\">\r\n            <div className=\"logo bold\">Employee Directory</div>\r\n            <div className=\"descriptor\">\r\n                <div className=\"bold\">Employee Search: </div>\r\n                <Search />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Navbar;","import { useEffect, useContext } from 'react';\r\nimport { EmployeeContext } from \"../components/EmployeeContext\"\r\nimport axios from \"axios\"\r\n\r\nexport function useGet(url) {\r\n    const { employees, setEmployees, displayedEmployees, setDisplayedEmployees } = useContext(EmployeeContext)\r\n\r\n \r\n\r\n    // gets employees from an api, stores them in both employees, and displayed employees. Only occurs once when component is mounted.\r\n    useEffect(() => {\r\n        async function getEmployees() {\r\n            try {\r\n                const response = await axios.get(url)\r\n                // using employees to store a copy of all the employees that will not be changed\r\n                setEmployees(response.data.results)\r\n                // employees to be a changed  version of the employees that will be displayed for sorting and filtering.\r\n                setDisplayedEmployees(response.data.results)\r\n            }\r\n            catch (error) {\r\n                console.log(\"error ocurred getting info from the API: \", error)\r\n            }\r\n        }\r\n        getEmployees()\r\n    }, [])\r\n\r\n    // used to decide which function to trigger\r\n    function sortFunc(sort) {\r\n        switch (sort) {\r\n            case \"name\":\r\n                sortByName()\r\n                break\r\n            case \"age\":\r\n                sortByAge()\r\n                break\r\n            default:\r\n                console.log(\"sort does not match any cases\")\r\n        }\r\n    }\r\n\r\n    // sorts the employees based on first name.\r\n    function sortByName() {\r\n        employees.sort(function (a, b) {\r\n            if (a.name.first < b.name.first) {\r\n                return -1;\r\n            } else {\r\n                return 1;\r\n            }\r\n        })\r\n        // You have to spread, because this creates a new variable, instead of just updating the variable. React will not recognize it as an update if you just update the variable.\r\n        setDisplayedEmployees([...employees])\r\n    }\r\n\r\n    // sorts the employees based on age.\r\n    function sortByAge() {\r\n        employees.sort(function (a, b) {\r\n            return (a.dob.age - b.dob.age)\r\n        })\r\n        setDisplayedEmployees([...employees])\r\n    }\r\n\r\n    return { displayedEmployees, sortFunc }\r\n}\r\n","import React from 'react';\r\nimport \"./Buttons.css\"\r\n\r\nfunction Button({ children }) {\r\n\r\n    return (\r\n        <button className=\"Button\">\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\nexport default Button;","import React, { useState, useContext } from 'react';\r\nimport  {useGet} from \"../hooks/API.js\"\r\nimport Button from \"./Button.js\"\r\nimport { EmployeeContext } from './EmployeeContext.js';\r\n\r\n//Check out 20-State/03-Stu_useState\r\nfunction Table() {\r\n    //a friends api https://randomuser.me/documentation#howto\r\n    // exists in case I ever built functionality in to change the url, which would get a new set of employees. Currently not being used other than to store the url.\r\n    const [url] = useState(\"https://randomuser.me/api/?results=10\")\r\n    // custom hook used for getting the employees from the api and storing the sort functions\r\n    const { sortFunc } = useGet(url);\r\n    // contains the employees to display in the table\r\n    const { displayedEmployees } = useContext(EmployeeContext)\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <td onClick={() => sortFunc(\"name\")}><Button>First Name</Button></td>\r\n                    <td>Last Name</td>\r\n                    <td onClick={() => sortFunc(\"age\")}><Button>Employee ID</Button></td>\r\n                    <td>Gender</td>\r\n                    <td>E-mail</td>\r\n                    <td onClick={() => sortFunc(\"age\")}><Button>Age</Button></td>\r\n                    \r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {displayedEmployees.map(employee => {\r\n                    return (\r\n                        <tr key={employee.login.uuid}>\r\n                            <td>{employee.name.first}</td>\r\n                            <td>{employee.name.last}</td>\r\n                            <td>{employee.location.street.number}</td>\r\n                            <td>{employee.gender}</td>\r\n                            <td>{employee.email}</td>\r\n                            <td>{employee.dob.age}</td>\r\n                        </tr>\r\n                    )\r\n                }\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\nexport default Table;","import React, { useState } from 'react';\r\n\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar\"\r\nimport Table from \"./components/Table\"\r\nimport { EmployeeContext } from \"./components/EmployeeContext\"\r\n\r\nfunction App() {\r\n    const [employees, setEmployees] = useState([]);\r\n    const [displayedEmployees, setDisplayedEmployees] = useState([])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <EmployeeContext.Provider value={{ employees, setEmployees, displayedEmployees, setDisplayedEmployees }}>\r\n                <Navbar />\r\n                <Table />\r\n            </EmployeeContext.Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// a custom api \nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  \n    window.location.hostname === '[::5]' ||\n    \n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-10]|2[0-7][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n     \n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        \n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log('test');\n          \n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              \n              console.log(\n                'habla javaScript! :)'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n             \n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  \n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      \n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        \n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        \n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// .register() will allow Offline and load faster. \r\n// made debuging more difficult... I found out.\r\n// \r\n// serviceWorker.unregister();\r\n\r\nserviceWorker.register();"],"sourceRoot":""}